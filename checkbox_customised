# Checkbox Environment Generator

This repository contains a script called **`generate_checkbox_env.sh`**.  
It is a one-shot setup wizard that builds a complete Checkbox environment for you, with your **own provider and test plan** already included.

---

## What the script does (step by step, in plain English)

1. **Makes a clean workspace**  
   - Creates a folder structure just for Checkbox.  
   - Keeps everything contained so your system stays untouched.

2. **Builds a Python sandbox (virtual environment)**  
   - Think of this like a ‚Äúmini computer inside your computer‚Äù where Checkbox will run safely.  
   - This way, it doesn‚Äôt mess with your system‚Äôs Python.

3. **Downloads and installs Checkbox**  
   - Pulls Checkbox directly from the source.  
   - Installs all required Python packages inside the sandbox.  
   - Makes sure the environment has everything Checkbox needs.

4. **Adds your custom provider**  
   - Registers the provider **`my-provider`** (from this repo).  
   - A provider in Checkbox is like a ‚Äúfolder of tests‚Äù that belong together.  
   - After running the script, Checkbox will recognize `my-provider` just like the built-in ones.

5. **Adds your custom test plan**  
   - Registers the test plan **`my-custom-plan`**.  
   - A test plan is a collection of tests bundled together to run as a set.  
   - This ensures your plan shows up in Checkbox menus.

6. **Finishes with a ready-to-run Checkbox setup**  
   - After the script ends, you can immediately run:  
     ```bash
     ./venv/bin/checkbox-cli
     ```  
   - Both your **`my-provider`** and **`my-custom-plan`** are already available.  
   - No extra steps required.

---

## Why this is useful

Normally, you would need to do all of these by hand:  

- Create folders  
- Setup a Python virtual environment  
- Download Checkbox source code  
- Install all the dependencies  
- Copy/link your provider and test plans into the right directories  
- Fix file paths  

That‚Äôs a lot of manual steps.  

üëâ With this script, you just run:

```bash
./generate_checkbox_env.sh


As discussed with Andre and Thomas, preliminary evaluation suggests, we can leverage "checkbox" to create our own tests in python venv environment

- checkbox provides various "test plan" to perform HW / OS / package / utility tests with submission possibility to canonical for HW / OS Certification

**_checkbox components_**

- namespace
- provider
- test plan
- units, job and tests

- pre-defined test suits are available for selection. however these tests run from a read-only squashfs filesystem, which snap:checkbox gets installed by default

**_UI triggered by checkbox.checkbox-cli (via snap)_**
<img width="1012" height="752" alt="Image" src="https://github.com/user-attachments/assets/0349620d-4eed-488e-ae9a-715a665b334c" />

**_the above test selections are available via CLI too `(checkbox-cli list "test plan")`_**

<img width="902" height="620" alt="Image" src="https://github.com/user-attachments/assets/ae55447c-693e-4bb5-a9cc-68bde0b0f011" />

- we considered 3 "test plan" to suit ourselves for initial validations of Garden Linux
  - sever-certification-full
  - server-certification-functional
  - virtual-machine-full

**_- Units in each "test plan"_** 

- https://github.com/saubhikdattagithub/public/blob/main/list_bootstrapped_server_full.md
- https://github.com/saubhikdattagithub/public/blob/main/list_bootstrapped_server_functional.md
- https://github.com/saubhikdattagithub/public/blob/main/list_bootstrapped_virtual_machine_full.md

**_Difference of count of units/jobs among the 3 ‚Äútest plan(s)‚Äù_** 

https://github.com/saubhikdattagithub/public/blob/main/difference_test_plans.md
Which command/script each of the unit runs in each "test plan‚Äù

**_‚Äãüîú What each job within the "test plan unit" does" / Which script it runs? --> the below links highlights them_** 

- https://github.com/saubhikdattagithub/public/blob/main/jobs_server_full.md
- https://github.com/saubhikdattagithub/public/blob/main/jobs_server_functional.md
- https://github.com/saubhikdattagithub/public/blob/main/jobs_virtual_machine_full.md

- However **caveat** of above test from snap:checkbox is that the tests 
  - cannot be modified (read-only) 
  - designed for Ubuntu in specific
  
- to have a custom set of tests (writeable) for our own purpose, a python venv based testing is possible, as next:
  - create our own provider referring https://canonical-checkbox.readthedocs-hosted.com/en/stable/tutorial/writing-tests/test-case.html
    - '2025.gardenlinux.certification:tutorial'
    - 'tuesday.gardenlinux.cert:tut'  
  - define the units and jobs
  - modify the tests/scripts/checks with <CHECK>.pxu files
 
**_custom provider and units:_**
<img width="1908" height="1392" alt="Image" src="https://github.com/user-attachments/assets/975838f0-45cf-4894-82a0-b470eac4a335" />


**_pre-requisites for checkbox for ccloud - HW tests (to be baked in the image)_**
 - git clone https://github.com/gardenlinux/gardenlinux-ccloud
 - ./build azure-kvm-cisSysctl-nodejs-nvme-sssd_curl_dev_iso_pxe-amd64
        > checkbox.checkbox-cli

**_packages needed for test executions_** 
  - fio
  - stress-ng
  - lshw
  - more....



